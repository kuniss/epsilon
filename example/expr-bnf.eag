Code = Code Code "ADD" | number "ENTER".

Expr <+ Code2>:
    Term <Code1> ExprTail<Code1, Code2>.

ExprTail<- Code1, + Code3>:
    "+" Term<Code2> ExprTail<Code1 Code2 "ADD", Code3>.
ExprTail<- Code, + Code>: .

// ExprTail shorter:
// ExprTail:
//     <- Code1, + Code3> "+" Term<Code2> ExprTail<Code1 Code2 "ADD", Code3> | <- Code, + Code> .

// Expr as one EBNF rule instead - even shorter
// Expr <+ Code2>:
//     Term <Code1>
//     <Code1, Code2>
//         { <- Code1, + Code3>
//             "+" Term <Code2> <Code1 Code2 "ADD", Code3>
//         } <- Code, + Code>.

Term <+ number "ENTER": Code>:
    number <number>.

number = "0" | "1".

number:
    <+ "0": number> "0"
  | <+ "1": number> "1".